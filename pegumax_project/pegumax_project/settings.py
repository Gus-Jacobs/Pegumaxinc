"""
Django settings for pegumax_project project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import dj_database_url
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This line below should be the ONLY definition of SECRET_KEY for production.
# The hardcoded key is only a fallback if the environment variable is not set (useful for local dev if you don't set it locally).
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your-default-development-secret-key-here-make-it-long-and-random-for-local-dev')

# SECURITY WARNING: don't run with debug turned on in production!
# For clarity, it's often better to default DEBUG to True for local dev if the env var isn't set.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS', '')
if ALLOWED_HOSTS_STRING:
    ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split(',')
else:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] # Default for local development
    if not DEBUG: # In production, if DJANGO_ALLOWED_HOSTS is not set, this is a problem.
        print("WARNING: DJANGO_ALLOWED_HOSTS environment variable is not set. This is insecure for production.")
        # ALLOWED_HOSTS = ['*'] # Consider this carefully if you must, but specific domains are better.

# Application definition


INSTALLED_APPS = [
# Application definition
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main_site.apps.MainSiteConfig', # or just 'main_site'
    'django.contrib.humanize',
    'rest_framework', # Make sure this is also present
    'bot_monitor',
    'whitenoise.runserver_nostatic', # For serving static files in development if DEBUG=False
]

# STATIC_URL is defined later, this block is for WhiteNoise specific settings
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # This is correct and defined later
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'assets')] # This is correct and defined later

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Should be high up, but after SecurityMiddleware
    #'bot_monitor.middleware.CsrfExemptAPIMiddleware', # Add custom middleware here
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', # Ensure this is active for production
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


ROOT_URLCONF = 'pegumax_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Correct
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pegumax_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite for local development if DATABASE_URL is not set
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=os.environ.get('DJANGO_DB_SSL_REQUIRE', 'False') == 'True')
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Directory where collectstatic will gather files

# Enable WhiteNoise static file serving.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Additional locations of static files
STATICFILES_DIRS = [
    # BASE_DIR / "static", # Remove or comment out if not used
    BASE_DIR / "assets",   # Add path to your project-level assets directory
    BASE_DIR / "frontend/student-suite",   # Add path to your project-level assets directory

]

LOGIN_URL = 'login' # Name of the login URL pattern
LOGIN_REDIRECT_URL = 'main_site:home' # Redirect after successful login
LOGOUT_REDIRECT_URL = 'main_site:home' # Redirect after logout
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Keep production settings commented for now
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # TEMPORARY for signup
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'webmaster@yourdomain.com')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# API Key for Bot Remote Logging - Moved here for clarity
BOT_REMOTE_LOG_API_KEY = os.environ.get('DJANGO_BOT_REMOTE_LOG_API_KEY', "VvaGooVFHFLeYd7LNUCvXqcTwBBteeAL_local_fallback")

# Security settings for production (when DEBUG=False)
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = os.environ.get('DJANGO_SECURE_SSL_REDIRECT', 'True') == 'True'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # If behind a proxy like Nginx or Heroku/Render load balancer

    # Configure CSRF_TRUSTED_ORIGINS with your production domain(s)
    # Example: CSRF_TRUSTED_ORIGINS = ['https://your_render_app_name.onrender.com', 'https://www.yourdomain.com']
    CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
    if CSRF_TRUSTED_ORIGINS_STRING:
        CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_STRING.split(',')
    else:
        print("WARNING: DJANGO_CSRF_TRUSTED_ORIGINS is not set in production. This might cause issues with POST requests from your domain.")
